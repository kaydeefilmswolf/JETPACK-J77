use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, TokenAccount, Transfer, Token};

declare_id!("YourProgramIDHere");

#[program]
pub mod jetj77_token {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, max_supply: u64) -> Result<()> {
        let token_data = &mut ctx.accounts.token_data;
        token_data.owner = ctx.accounts.owner.key();
        token_data.marketing_wallet = ctx.accounts.marketing_wallet.key();
        token_data.max_supply = max_supply;
        token_data.is_mutable = false;

        // Mint the fixed supply of tokens to the owner's wallet
        token::mint_to(
            ctx.accounts
                .mint_to_context()
                .with_signer(&[&ctx.accounts.mint.key().as_ref()]),
            max_supply,
        )?;
        Ok(())
    }

    pub fn process_transaction(ctx: Context<ProcessTransaction>, amount: u64) -> Result<()> {
        let marketing_fee = amount / 100; // 1% fee
        let transfer_amount = amount - marketing_fee;

        // Transfer 1% fee to the marketing wallet
        let cpi_accounts_fee = Transfer {
            from: ctx.accounts.from.to_account_info(),
            to: ctx.accounts.marketing_wallet.to_account_info(),
            authority: ctx.accounts.from_authority.to_account_info(),
        };
        let cpi_ctx_fee = CpiContext::new(ctx.accounts.token_program.to_account_info(), cpi_accounts_fee);
        token::transfer(cpi_ctx_fee, marketing_fee)?;

        // Transfer remaining tokens to the recipient
        let cpi_accounts_transfer = Transfer {
            from: ctx.accounts.from.to_account_info(),
            to: ctx.accounts.to.to_account_info(),
            authority: ctx.accounts.from_authority.to_account_info(),
        };
        let cpi_ctx_transfer = CpiContext::new(ctx.accounts.token_program.to_account_info(), cpi_accounts_transfer);
        token::transfer(cpi_ctx_transfer, transfer_amount)?;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = owner, space = 8 + 32 + 32 + 8 + 1)]
    pub token_data: Account<'info, TokenData>,
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(init, mint::decimals = 0, mint::authority = owner, mint::freeze_authority = owner, payer = owner)]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub owner_token_account: Account<'info, TokenAccount>,
    #[account(mut, address = marketing_wallet.key())]
    pub marketing_wallet: SystemAccount<'info>,
    #[account(address = token::ID)]
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct ProcessTransaction<'info> {
    #[account(mut)]
    pub from: Account<'info, TokenAccount>,
    #[account(mut)]
    pub to: Account<'info, TokenAccount>,
    #[account(mut)]
    pub marketing_wallet: Account<'info, TokenAccount>,
    pub from_authority: Signer<'info>,
    #[account(address = token::ID)]
    pub token_program: Program<'info, Token>,
}

#[account]
pub struct TokenData {
    pub owner: Pubkey,
    pub marketing_wallet: Pubkey,
    pub max_supply: u64,
    pub is_mutable: bool,
}

impl<'info> Initialize<'info> {
    fn mint_to_context(&self) -> CpiContext<'_, '_, '_, 'info, token::MintTo<'info>> {
        let cpi_accounts = token::MintTo {
            mint: self.mint.to_account_info(),
            to: self.owner_token_account.to_account_info(),
            authority: self.owner.to_account_info(),
        };
        CpiContext::new(self.token_program.to_account_info(), cpi_accounts)
    }
}
